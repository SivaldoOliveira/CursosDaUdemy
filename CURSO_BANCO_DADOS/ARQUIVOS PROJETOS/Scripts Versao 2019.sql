/* Modelagem Básica - 

ENTIDADE=TABELA
CAMPOS = ATRIBUTOS */

CLIENTE

NOME - CARACTER(30)
CPF - NUMERICO(11)
EMAIL - CARACTER(30)
TELEFONE - CARACTER(30)
ENDERECO - CARACTER(100)
SEXO - CARACTER(1)

/* PROCESSOS DE MODELAGEM  */

/* FASE 01 E FASE 02 - AD ADM DE DADOS */

MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LÓGICA - QUALQUER PROGRAMA DE MODELAGEM

/* FASE 03 - DBA / AD */

MODELAGEM FÍSICA - SCRIPTS DE BANCO

/* INICIANDO A MODELAGEM FÍSICA */

/* CRIANDO O BANCO DE DADOS */

CREATE DATABASE EXEMPLO

CREATE DATABASE PROJETO;

/* CONECTANDO-SE AO BANCO */

USE PROJETO;

/* CRIANDO A TABELA DE CLIENTES */

CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100)

);

/* VERIFICANDO AS TABELAS DO BANCO */

SHOW TABLES;

USE EXEMPLO;
SHOW TABLES;

USE PROJETO;

/* DESCOBRINDO COMO É A ESTRUTURA DE UMA TABELA */

DESC CLIENTE;

-----

/*Tipos de dados */

Todos os banos de dados possuem tipos que devem ser atribuidos aos dados de uma tabela.
Para caracteres literais, temos char e varchar, para números temos int e float, para
objetos como fotos e documentos, temos o blob, para textos extensos, temos o text. 
A disciplina de banco de dados é tão fantástica que ao entendermos o porque das coisas,
podemos iniciar já em modo avançado e um bom exemplo disso são os tipos. Há uma profissão
dentro da área que é a do analista de performance ou tuning, esse profissional é responsável
por analisar o banco de dados e deixá-lo mais rápido. Parece algo avançado, e é! Porém,
com alguas atitudes simples, podemos deixar o banco sem a necessidade de atuação desse profissional.

Cada caracter no banco de dados, vale 1 byte. Sendo assim, se eu entro com o dado JOÃO,
estou entrando com 4 bytes no meu banco. E o que isso tem a ver com a tiagem de tabelas?

O banco de dados funciona como um download de dados da internet. Se baixamos um arquivo de 1 giga,
temos um temo maior que o download de 50 megas, considerando a mesma velocidade de conexão.

Ao tiparmos uma tabela de modo errado ou displicente, vamos aumentar a quantidade de dados que 
será baixada do banco de dados, prolongando assim o tempo de resposta.

Uma comparacao bem didatica é o tipo char e varchar
A palavra var, vem de variant, em ingles, ou seja, que é dinâmica. Logo, vimos que 1 caracter
é igual a 1 byte. Vejamos então a tipagem

varchar(10)
char(10)

entrando a palavra joao

total de bytes varchar(10) = 4 bytes
toal de bytes cahr(10) = 10 bytes

isso ocorre pois o char não varia. Os caracteres restantes serao preenchidos com espaço. 
eles nao ficam vazios. Enquanto que no varchar, o tipo varia conforme o dado.
Entao utilizo sempre o varchar? Não. O charé ligeiramente mais performatico, por nao
ter que gastar tempo variando de tamanho. Entao a regra é utilizar sempre o char quando
sabemos que o numero de caracteres naquela coluna nao vai variar nunca. Por exemplo,
unidade federativa, com dois digitos, sexo com um digito e assim por diante. Vista a diferença
que podemos fazer com uma tipagem correta de tabelas, na próxima aula detalharemos os tipos do mysql
e nos modulos específicos de cada banco, você entenderá os tipos correspondentes no sql server
e no oracle, que mudam muito pouco.

/*  Inserindo dados e valores nulos */

use projeto;

/* Mostrando as tabelas */
show tables

/* exibindo a estrutura de uma tabela */
desc cliente;

/* sintaxe basica de inserção - INSERT INTO TABELA... */

/* FORMA 01 - OMITINDO AS COLUNAS */

INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');

/* FORMA 02 - COLOCANDO AS COLUNAS */

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/* FORMA 03 - INSERT COMPACTO - SOMENTE MYSQL */

INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
                          ('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');
						  
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',99999999999);

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',22222222222);
						  
/* O COMANDO SELECT 
selecao projecao e juncao
*/

SELECT NOW() as DATA_HORA, 'FELIPE MAFRA' AS PROFESSOR;

SELECT 'FELIPE MAFRA';

SELECT 'BANCO DE DADOS';

/* ALIAS DE COLUNAS */


SELECT NOME AS CLIENTE, SEXO, EMAIL FROM CLIENTE;

SELECT NOME, SEXO, EMAIL, ENDERECO FROM CLIENTE;

SELECT   EMAIL, SEXO, ENDERECO, NOME FROM CLIENTE;

SELECT   EMAIL, SEXO, ENDERECO, NOME, NOW() AS DATA_HORA FROM CLIENTE;

/* APENAS PARA FINS ACADEMICOS */

SELECT * FROM CLIENTE;

/*TABELA ERRADA - NAO DIGITE DIRETAMENTE NO BANCO */
CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30)
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100),

);

SELECT * FROM CLIENTE;
/*PARA PROJEÇÃO USA > SELECT
SELEÇÃO USA > WHERE */

/* FILTRANDO DADOS COM WHERE E LIKE */

SELECT NOME, TELEFONE FROM CLIENTE;

/* FILTRANDO */

SELECT NOME, SEXO FROM CLIENTE
WHERE SEXO = 'M';

SELECT NOME, ENDERECO FROM CLIENTE
WHERE SEXO = 'F';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO = 'RJ';

/* UTILIZANDO O LIKE */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE 'RJ';

/* CARACTER CORINGA % -> QUALQUER COISA */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE 'OSCAR CURY%';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%CENTRO%';


/* UTILIZAR O UPDATE SEMPRE ACOMPANHADO DA CLAUSULA WHERE */

UPDATE CLIENTE
SET EMAIL = 'JORGE@HOTMAIL.COM'
WHERE NOME = 'JORGE';



/*DELETANDO REGISTROS COM A CLAUSULA DELETE*/]

DELETE FROM CLIENTE;

SELECT COUNT (*) FROM CLIENTE;

DELETE FROM CLIENTE
WHERE NOME = 'ANA';



/* MODELAGEM DE CLIENTE */

CREATE DATABASE COMERCIO;

USE COMERCIO;

CREATE TABLE CLIENTE (
       IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	   NOME VARCHAR(30) NOT NULL,
	   SEXO ENUM('M', 'F') NOT NULL,
	   EMAIL VARCHAR (50) UNIQUE,
	   CPF VARCHAR(15) UNIQUE
);


CREATE TABLE TELEFONE(
		IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
		TIPO ENUM('COM','RES','CEL'),
		NUMERO	VARCHAR (10),
		ID_CLIENTE INT,
		FOREIGN KEY (ID_CLIENTE)
		REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE ENDERECO(
	  IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	  RUA VARCHAR(30) NOT NULL,
	  BAIRRO VARCHAR(30) NOT NULL,
	  CIDADE VARCHAR(30) NOT NULL,
	  ESTADO CHAR(20) NOT NULL,
	  ID_CLIENTE INT UNIQUE,
	  FOREIGN KEY (ID_CLIENTE)
	  REFERENCES CLIENTE(IDCLIENTE)
);



/*VIEW - VISÕES */


CREATE VIEW V_RELATORIO AS
SELECT C.NOME, C.SEXO,
IFNULL (C.EMAIL, 'SEM EMAIL') AS "E-MAIL",
T.TIPO,
T.NUMERO,
E.BAIRRO,
E.CIDADE,
E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;



SELECT NOME, SEXO, CIDADE
FROM V_RELATORIO;


/* ORDER BY */

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE;

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME;

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME, CPF ASC;

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY 4;

/*COMANDO PARA MUDA O DELIMITADOR ; PARA OUTRO */

DELIMITER $ /*LIMITADO DE COMANDO FICA SENDO O $*/


/*PROCEDURE */



BEGIN

ACAO;

END
$

CREATE PROCEDURE CONTA()
BEGIN
		SELECT 10 + 10 AS "CONTA";
		
END
$

/* CHAMADO A PROCEDURE */

CALL CONTA ()$

/*APAGA A PROCEDURE CRIADA*/

DROP PROCEDURE CONTA;

/* CRIANDO NOVA PROCEDURE COM PARAMENTROS*/
		
CREATE PROCEDURE CONTA (NUMERO1 INT, NUMERO2 INT)
BEGIN
	SELECT NUMERO1 + NUMERO2 AS "CONTA";
END
$

DELIMITER ;

CALL CONTA(100,78);	


/* PROCCEDURES COM TABELAS */

CREATE TABLE CURSOS (
IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30)NOT NULL,
HORAS INT (3) NOT NULL,
VALOR FLOAT (10,2) NOT NULL);


INSERT INTO CURSOS VALUES (NULL,'BANCO DE DADOS FUNDAMENTAL', 25, 200.00);
INSERT INTO CURSOS VALUES (NULL,'CSHARP AVANÇADO', 50, 600.00);
INSERT INTO CURSOS VALUES (NULL,'WEB 2.0', 35, 450.00);
INSERT INTO CURSOS VALUES (NULL,'JAVASCRIP AVANÇADO', 45,350.00);
INSERT INTO CURSOS VALUES (NULL,'BANCO DE DADOS FUNDAMENTAL', 25, 200.00);


CREATE PROCEDURE CAD_CURSOS(P_NOME VARCHAR(30), P_HORAS INT (3),P_PRECO FLOAT (10,2))
BEGIN
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
	END$


DELIMITER ;

CALL CAD_CURSOS('BI SQL SERVER', 35, 250.00);

CREATE PROCEDURE SEL_CURSO()
BEGIN
	SELECT IDCURSO, NOME , HORAS, VALOR
	FROM CURSOS;
	END
	$
	
	
	
	
/* FUNCOES DE AGREGRCAO NUMERICAS */

CREATE TABLE VENDEDORES (

IDVENDENDOR INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
SEXO CHAR(1),
JANEIRO FLOAT(10,2),
FEVEREIRO FLOAT(10,2),
MARCO FLOAT(10,2)
);



SHOW


/* MAX - TRAZ O VALOR MAXIMO DE UMA COLUNA */

SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;

/* MIN - TRAZ O VALOR MINIMO DE UMA COLUNA */


SELECT MIN(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;


/* AVG - MEDIA DOS VALORES DE UMA COLUNA */


SELECT AVG(FEVEREIRO) AS MEDIA_FEV
FROM VENDEDORES;



/* VARIAS FUNCOES */
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
AVG(JANEIRO) AS MEDIA_JAN
FROM VENDEDORES;


/* TRUNCATE */
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
TRUNCATE(AVG(JANEIRO),2)AS MEDIA_JAN
FROM VENDEDORES;


/* AGREGANDO COM SUM() */

SELECT SUM(JANEIRO) AS TOTAL_JAN
FROM VENDEDORES;

SELECT SUM(JANEIRO) AS TOTAL_JAN,
SUM(FEVEREIRO) AS TOTAL_FEV,
SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

/* VENDAS POR SEXO*/
SELECT SEXO, SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO;


/* TRABALHANDO COM SUBQUERYS */

/* VENDEDOR QUE VENDEU MENOS EM MARCO E O SEU NOME */

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);
 
/*NOME E O VALOR QUE VENDEU MAIS EM MARCO*/
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

/* QUEM VENDEU MAIS QUE O VALOR MEDIO DE FEVEREIRO*/
 
SELECT NOME, MARCO FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

SELECT AVG(FEVEREIRO) FROM VENDEDORES;

SELECT NOME, MARCO FROM VENDEDORES
WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

/* OPERACOES EM LINHA */

SELECT  NOME,
JANEIRO,
FEVEREIRO,
MARCO,
(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
FROM VENDEDORES;



/* ALTERANDO TABELAS */

CREATE TABLE TABELA (
COLUNA1 VARCHAR (30),
COLUNA2 VARCHAR(30),
COLUNA3 VARCHAR (30) 
);

--ADICIONANDO UMA PK
ALTER TABLE TABELA
ADD PRIMARY KEY(COLUNA1);


-- ADICIONANDO COLUNA SEM POSICAO. ULTIMA POSICAO
ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);



--ADICIONANDO COLUNA EM UMA POSICAO 
ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

--MODIFICANDO O TIPO DE UM CAMPO
ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL;


--RENOMEANDO O NOME DA TABELA
ALTER TABLE TABELA
RENAME PESSOA;

--
CREATE TABLE TIME(
IDTIME INT PRIMARY KEY AUTO_INCREMENT,
TIME VARCHAR(30),
ID_PESSOA VARCHAR(30)
);


--FOREIGN KEY
ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES

/* ORGANIZANDO CHAVES E ACOES DE CONSTRAINTS  */

DROP TABLE ENDERECO;
DROP TABLE TELEFONE;
DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
IDCLIENTE INT,
NOME VARCHAR(30) NOT NULL
);


CREATE TABLE TELEFONE(
IDTELEFONE INT,
TIPO CHAR(3) NOT NULL,
NUMERO VARCHAR(10) NOT NULL,
ID_CLIENTE INT
);


ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);




SHOW CREATE TABLE TELEFONE;


/*DICIONARIO DE DADOS */

SHOW DATABASES;

USE INFORMATION_SCHEMA;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;


SELECT CONSTRAINT_SCHEMA AS "BANCO",
TABLE_NAME AS "TABELA",
CONSTRAINT_NAME AS "NOME REGRA",
CONSTRAINT_TYPE AS "TIPO"
FROM TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = 'COMERCIO';


/* APAGANDO CONSTRAINTS */
ALTER TABLE TELEFONE
DROP FOREIGN KEY  FK_CLIENTE_TELEFONE;


/* LENDO RELACIONAMENTOS */
--PRIMEIRO ALGARIMOS DO PAR DIZ SE E OBRIGATORIO 1 VERDADEIRO 0 FALSO
-- CARDINALIDADE E DEFINIDA PELO SEGUNDO ALGARIMOS DO PAR 1 MAXIMO N VARIOS

(1,1) 1 E OBRIGATORIO A INFORMAÇÃO E 1 APENAS UMA INFORMAÇÃO.

(0,1) 0 NÃO E OBRIGATORIO E 1 APENAS UMA INFORMAÇÃO;

(1,n) 1 E OBRIGATORIO E N VARIAS INFORMAÇÕES.

(0,n) 0 NÃO E OBRIGATORIO N PODE CADASTRA VARIAS INFORMAÇÕES.


/*COMO LE O RELACIONAMENTO SEMPRE DO SEGUNDO ALGARIMOS  */
 TABLEA CLIENTE (1,1) > TABELA TELEFONE (0,N) 
CLIENTE 1 x N TELEFONES "UM CLIENTE TEM VARIOS TELEFONES)"

TABELA CLINTE (1,1) > TABELA ENDERECO(1,1)
CLIENTE 1 X 1 ENDERECO "UM ENDERECO PARA UM CLIENTE"

/*CRIANDO A O BANCO DE DADOS DA OFICINA */

CREATE DATABASE OFICINA;

USE OFICINA;

CREATE TABLE CLIENTE(
	IDCLIENTE  INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM ('M','F') NOT NULL,
	ID_CARRO INT UNIQUE
	);
	
CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM ('CEL','RES','COM') NOT NULL,
	NUMERO VARCHAR(30) NOT NULL,
	ID_CLIENTE INT
);	
	
CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR (30) UNIQUE
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(30)NOT NULL,
	PLACA VARCHAR(30) NOT NULL UNIQUE,
	ID_MARCA INT
);

CREATE TABLE COR(
IDCOR INT PRIMARY KEY AUTO_INCREMENT,
COR VARCHAR(30) UNIQUE
);


CREATE TABLE CARRO_COR(
ID_CARRO INT,
ID_COR INT,
PRIMARY KEY(ID_CARRO,ID_COR)
);

/*CONTRAINTS */
ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY(ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY(ID_COR)
REFERENCES CARRO(IDCARRO);

/* PREENCHER O BANCO COM PELOS MENOS 


/* ENTENDENDO TRIGGERS */

/* ESTRUTURA DE UMA TRIGGER */
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INCIO

	QUALQUER COMANDO SQL 
	
END -> FIM.	


CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);


/* CRIANDO A TRIGGER */

DELIMITER $

CREATE TRIGGER BAKCUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
	
	INSERT INTO BKP_USUARIO VALUES
	(NULL, OLD.IDUSUARIO, OLD.NOME, OLD.LOGIN);

END
$


INSERT INTO USUARIO VALUES 
(NULL,'SIVALDO', 'SIMOL1504', 'XERECA');


DELETE FROM USUARIO WHERE IDUSUARIO = 1;


/* A 41 - COMUNICAÇÃO ENTRE BANCOS */

CREATE DATABASE LOJA;

USE LOJA;


CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);
CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

STATUS

INSERT INTO BACKUP.BKP_PRODUTO VALUES (NULL, 1000, 'ATESTE',0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $

CREATE TRIGGER BAKCUP_PRODUTO
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO 
	VALUES (NULL, NEW.IDPRODUTO, NEW.NOME,NEW.VALOR);

END
$

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',150.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',250.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',350.00);



/*AUTORELACIONAMENTO */

CREATE DATABASE AULA;

CREATE TABLE CURSOS(
IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
HORAS INT,
VALOR FLOAT(10,2),
ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES (NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES (NULL,'BUSINESS INTERLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES (NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES (NULL,'LOGICA PROGRAMA',20,400.00,NULL);
INSERT INTO CURSOS VALUES (NULL,'RUBY',20,600.00,4);


SELECT NOME, VALOR HORAS, IFNULL(ID_PREREQ,"SEM REQ") REQUISITOS
FROM CURSOS;

/*NOME, VALOR, HORAS E O NOME DO PRE REQUISITO DO CURSO */

SELECT 
C.NOME AS CURSO, 
C.VALOR AS VALOR, 
C.HORAS AS CARGA,
IFNULL(P.NOME, "--") AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;



/* PRIMEIRA FN

	-ATOMICIDADE - UM CAMPO NAO PODE SER DIVISIVEL
	-UM CAMPO NAO PODE SER VETORIZAADO
	-PK CHAVE PRIMARIA 
*/

/* SEGUNDA E TERCEIRAS FORMA NORMAIS 
  TOTALIDADE
 2FN CAMPOS NAO CHAVES DEVE DEPENDE 
 TOTALMENTE DA CHAVE PRIMARIA
 
 
 3FN TRANSITIVA 
 CAMPOS NÃO CHAVE QUE DEPENTE DE OUTROS
 CAMPOS NÃO CHAVE ELES VIRAM OUTRA TABELA;

*/

/* PROJETO CONSULTORIO */

CREATE DATABASE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)

);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE
);

/* CRIANDO AS CONSTRAINTS - CORREÇÃO 
CORREÇÃO COD DO OBJ (PK, FK) _TABELA PERTENCENTE _TABELA DE ONDE VEM */

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);







